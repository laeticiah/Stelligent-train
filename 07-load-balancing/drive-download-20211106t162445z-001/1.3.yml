AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  VPC:
    Type: String
  PublicSubnet1:
    Type: String
  PublicSubnet2:
    Type: String
  PublicSubnet3:
    Type: String

Resources:
  WebserverSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "security group for EC2"
      SecurityGroupIngress: 
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"

  WebServersLC:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: 'ami-01cc34ab2709337aa'
      InstanceType: 't2.micro'
      KeyName: buchi
      SecurityGroups:
        - !Ref 'WebserverSG'
      UserData: 
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe
            sudo amazon-linux-extras install -y nginx1
            sudo service nginx start
            sudo echo "<p>Automation for the People</p>" > /usr/share/nginx/html/index.html

  WebServerAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
        - us-east-1c
      DesiredCapacity: 2
      HealthCheckType: 'ELB'
      HealthCheckGracePeriod: 30 
      LaunchConfigurationName: !Ref WebServersLC
      MaxSize: 2
      MinSize: 1
      TargetGroupARNs:
        - !Ref ELBTargetGroup

  ELBSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "security group for ALB"
      SecurityGroupIngress: 
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"

  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      Port: 80
      Protocol: HTTP
      HealthCheckPath: "/index.html"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckIntervalSeconds: 20
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher: 
          HttpCode: "200"
      HealthCheckEnabled: true
      VpcId: !Ref VPC
      TargetGroupAttributes: 
        - Key: "deregistration_delay.timeout_seconds"
          Value: "20"

  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: "test-Application-Load-Balancer"
      Scheme: "internet-facing"
      Type: "application"
      SecurityGroups:
        - !GetAtt ELBSG.GroupId
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      IpAddressType: "ipv4"

  HTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions: 
        - Order: 1
          RedirectConfig: 
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
          Type: "redirect"

  HTTPSListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: "HTTPS"
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:218063557524:certificate/745f0691-af09-422c-9b45-00acc3e244d7
      SslPolicy: ELBSecurityPolicy-FS-2018-06
      DefaultActions: 
        - Order: 1
          TargetGroupArn: !Ref ELBTargetGroup
          Type: "forward"

